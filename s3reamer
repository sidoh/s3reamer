#!/usr/bin/ruby

require 'optparse'
require 'aws-sdk'

require_relative 'directory_streamer'

banner = "Usage: s3reamer DIRECTORY BUCKET_NAME [options]"
if ARGV.length < 2
  $stderr.puts banner
  exit 1
end

dir = ARGV.shift
if !File.exists?(dir)
  $stderr.puts "Directory does not exist: #{dir}"
  exit 1
elsif !File.directory?(dir)
  $stderr.puts "Not a directory: #{dir}"
  exit 1
end

bucket_name = ARGV.shift

options = {
  region: 'us-east-1',
  bucket_name: bucket_name,
  directory: dir,
  reader_timeout: 30,
  reader_sleep_interval: 1,
  pool_size: 4,
  log_level: Logger::INFO,
  credentials_file: ENV['HOME'] + '/.aws/credentials',
  credentials_profile: 'default'
}
OptionParser.new do |opts|
  opts.banner = banner

  opts.on("-r", "--region [AWS_REGION]") do |v|
    options[:region] = v
  end

  opts.on("--file-read-timeout [SECONDS]", Integer,
      "Number of seconds to wait for a file to grow before timing out (defaults to 10)") do |v|
    options[:reader_timeout] = v
  end

  opts.on("--reader-sleep-interval [SECONDS]", Integer,
      "Number of seconds to sleep after an attempted read (defaults to 1)") do |v|
    options[:reader_sleep_interval] = v
  end

  opts.on("-n", "--parallelism [N]", Integer,
      "Maximum number of concurrent files being processed (defaults to 4)") do |v|
    options[:pool_size] = v
  end

  opts.on("-v", "--verbose") do
    options[:log_level] = Logger::DEBUG
  end

  opts.on("-c", "--aws-credientials [PATH]", String,
      "Path to AWS credentials file. Defaults to ~/.aws/credentials") do |v|
    options[:credentials_file] = v
  end

  opts.on("-p", "--aws-credentials-profile [PROFILE]", String,
      "AWS credentials profile. Defaults to \"default\".") do |v|
    options[:credentials_profile] = v
  end
end.parse!

credentials = Aws::SharedCredentials.new(path: options[:credentials_file], profile_name: options[:credentials_profile])
s3 = Aws::S3::Resource.new(region: options[:region], credentials: credentials)
bucket = s3.bucket(options[:bucket_name])
watcher = S3reamer::DirectoryStreamer.new(options)
watcher.stream_directory(directory: options[:directory], bucket: bucket)
